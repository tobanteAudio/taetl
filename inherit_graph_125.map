<map id="Graphical Class Hierarchy" name="Graphical Class Hierarchy">
<area shape="rect" id="node1" href="$structetl_1_1integral__constant.html" title="etl::integral_constant\l\&lt; Type, val \&gt;" alt="" coords="5,2145,165,2186"/>
<area shape="rect" id="node2" href="$structetl_1_1conjunction.html" title="Forms the logical conjunction of the type traits B..., effectively performing a logical AND on the se..." alt="" coords="257,5,417,32"/>
<area shape="rect" id="node7" href="$structetl_1_1disjunction.html" title="Forms the logical disjunction of the type traits B..., effectively performing a logical OR on the seq..." alt="" coords="259,123,415,149"/>
<area shape="rect" id="node8" href="$structetl_1_1has__virtual__destructor.html" title="https://en.cppreference.com/w/cpp/types/has_virtual_destructor " alt="" coords="221,173,452,200"/>
<area shape="rect" id="node9" href="$structetl_1_1is__abstract.html" title="is_abstract " alt="" coords="259,224,415,251"/>
<area shape="rect" id="node10" href="$structetl_1_1is__aggregate.html" title="is_aggregate " alt="" coords="252,275,421,301"/>
<area shape="rect" id="node11" href="$structetl_1_1is__arithmetic.html" title="If T is an arithmetic type (that is, an integral type or a floating&#45;point type) or a cv&#45;qualified ver..." alt="" coords="251,325,422,352"/>
<area shape="rect" id="node12" href="$structetl_1_1is__array.html" title="Checks whether T is an array type. Provides the member constant value which is equal to true..." alt="" coords="268,376,405,403"/>
<area shape="rect" id="node13" href="$structetl_1_1is__array_3_01T[]_4.html" title="etl::is_array\&lt; T[]\&gt;" alt="" coords="265,427,408,453"/>
<area shape="rect" id="node14" href="$structetl_1_1is__array_3_01T[N]_4.html" title="etl::is_array\&lt; T[N]\&gt;" alt="" coords="260,477,413,504"/>
<area shape="rect" id="node15" href="$structetl_1_1is__assignable.html" title="If the expression etl::declval&lt;T&gt;() = etl::declval&lt;U&gt;() is well&#45;formed in unevaluated context..." alt="" coords="269,529,404,570"/>
<area shape="rect" id="node16" href="$structetl_1_1is__base__of.html" title="If Derived is derived from Base or if both are the same non&#45;union class (in both cases ignoring cv&#45;qu..." alt="" coords="253,594,420,635"/>
<area shape="rect" id="node17" href="$structetl_1_1is__bounded__array.html" title="Checks whether T is an array type of known bound. Provides the member constant value which is equal t..." alt="" coords="237,660,437,687"/>
<area shape="rect" id="node18" href="$structetl_1_1is__bounded__array_3_01T[N]_4.html" title="etl::is_bounded_array\l\&lt; T[N]\&gt;" alt="" coords="255,711,418,753"/>
<area shape="rect" id="node19" href="$structetl_1_1is__class.html" title="etl::is_class\&lt; T \&gt;" alt="" coords="269,777,405,804"/>
<area shape="rect" id="node20" href="$structetl_1_1is__compound.html" title="If T is a compound type (that is, array, function, object pointer, function pointer, member object pointer, member function pointer, reference, class, union, or enumeration, including any cv&#45;qualified variants), provides the member constant value equal true. For any other type, value is false. " alt="" coords="251,828,422,855"/>
<area shape="rect" id="node21" href="$structetl_1_1is__const.html" title="If T is a const&#45;qualified type (that is, const, or const volatile), provides the member constant valu..." alt="" coords="267,879,406,905"/>
<area shape="rect" id="node22" href="$structetl_1_1is__const_3_01const_01T_01_4.html" title="etl::is_const\&lt; const T \&gt;" alt="" coords="248,929,425,956"/>
<area shape="rect" id="node23" href="$structetl_1_1is__destructible_3_01Type[]_4.html" title="https://en.cppreference.com/w/cpp/types/is_destructible " alt="" coords="265,981,408,1022"/>
<area shape="rect" id="node24" href="$structetl_1_1is__destructible_3_01void_01_4.html" title="https://en.cppreference.com/w/cpp/types/is_destructible " alt="" coords="265,1046,408,1087"/>
<area shape="rect" id="node25" href="$structetl_1_1is__enum.html" title="etl::is_enum\&lt; T \&gt;" alt="" coords="267,1112,407,1139"/>
<area shape="rect" id="node26" href="$structetl_1_1is__error__code__enum.html" title="etl::is_error_code\l_enum\&lt; T \&gt;" alt="" coords="269,1163,404,1205"/>
<area shape="rect" id="node27" href="$structetl_1_1is__error__condition__enum.html" title="etl::is_error_condition\l_enum\&lt; T \&gt;" alt="" coords="255,1229,418,1270"/>
<area shape="rect" id="node28" href="$structetl_1_1is__error__condition__enum_3_01errc_01_4.html" title="etl::is_error_condition\l_enum\&lt; errc \&gt;" alt="" coords="255,1294,418,1335"/>
<area shape="rect" id="node29" href="$structetl_1_1is__final.html" title="If T is a final class (that is, a class declared with the final specifier), provides the member const..." alt="" coords="271,1360,402,1387"/>
<area shape="rect" id="node30" href="$structetl_1_1is__floating__point.html" title="Checks whether T is a floating&#45;point type. Provides the member constant value which is equal to true..." alt="" coords="241,1411,433,1437"/>
<area shape="rect" id="node31" href="$structetl_1_1is__function.html" title="Checks whether T is a function type. Types like etl::function, lambdas, classes with overloaded opera..." alt="" coords="259,1461,415,1488"/>
<area shape="rect" id="node32" href="$structetl_1_1is__fundamental.html" title="If T is a fundamental type (that is, arithmetic type, void, or nullptr_t), provides the member consta..." alt="" coords="243,1512,430,1539"/>
<area shape="rect" id="node33" href="$structetl_1_1is__integral.html" title="etl::is_integral\&lt; Type \&gt;" alt="" coords="249,1563,424,1589"/>
<area shape="rect" id="node34" href="$structetl_1_1is__lvalue__reference.html" title="Checks whether T is a lvalue reference type. Provides the member constant value which is equal to tru..." alt="" coords="231,1613,443,1640"/>
<area shape="rect" id="node35" href="$structetl_1_1is__lvalue__reference_3_01T_01_6_01_4.html" title="etl::is_lvalue_reference\l\&lt; T &amp; \&gt;" alt="" coords="249,1665,424,1706"/>
<area shape="rect" id="node36" href="$structetl_1_1is__member__object__pointer.html" title="Checks whether T is a non&#45;static member object pointer. Provides the member constant value which is e..." alt="" coords="253,1730,420,1771"/>
<area shape="rect" id="node37" href="$structetl_1_1is__nothrow__constructible.html" title="The variable definition does not call any operation that is not trivial. For the purposes of this che..." alt="" coords="232,1795,441,1837"/>
<area shape="rect" id="node38" href="$structetl_1_1is__nothrow__destructible_3_01Type_01_6_01_4.html" title="etl::is_nothrow_destructible\l\&lt; Type &amp; \&gt;" alt="" coords="235,1861,438,1902"/>
<area shape="rect" id="node39" href="$structetl_1_1is__nothrow__destructible_3_01Type_01_6_6_01_4.html" title="etl::is_nothrow_destructible\l\&lt; Type &amp;&amp; \&gt;" alt="" coords="235,1926,438,1967"/>
<area shape="rect" id="node40" href="$structetl_1_1is__object.html" title="If T is an object type (that is any possibly cv&#45;qualified type other than function, reference, or void types), provides the member constant value equal true. For any other type, value is false. " alt="" coords="265,1992,408,2019"/>
<area shape="rect" id="node41" href="$structetl_1_1is__polymorphic.html" title="is_polymorphic " alt="" coords="245,2043,429,2069"/>
<area shape="rect" id="node42" href="$structetl_1_1is__reference.html" title="If T is a reference type (lvalue reference or rvalue reference), provides the member constant value e..." alt="" coords="254,2093,419,2120"/>
<area shape="rect" id="node43" href="$structetl_1_1is__reference_3_01T_01_6_01_4.html" title="etl::is_reference\&lt;\l T &amp; \&gt;" alt="" coords="267,2145,406,2186"/>
<area shape="rect" id="node44" href="$structetl_1_1is__reference_3_01T_01_6_6_01_4.html" title="etl::is_reference\&lt;\l T &amp;&amp; \&gt;" alt="" coords="267,2210,406,2251"/>
<area shape="rect" id="node45" href="$structetl_1_1is__rvalue__reference.html" title="Checks whether T is a rvalue reference type. Provides the member constant value which is equal to tru..." alt="" coords="230,2276,443,2303"/>
<area shape="rect" id="node46" href="$structetl_1_1is__rvalue__reference_3_01T_01_6_6_01_4.html" title="etl::is_rvalue_reference\l\&lt; T &amp;&amp; \&gt;" alt="" coords="249,2327,424,2369"/>
<area shape="rect" id="node47" href="$structetl_1_1is__same.html" title="If T and U name the same type (taking into account const/volatile qualifications), provides the member constant value equal to true. Otherwise value is false. " alt="" coords="258,2393,415,2420"/>
<area shape="rect" id="node48" href="$structetl_1_1is__same_3_01T_00_01T_01_4.html" title="etl::is_same\&lt; T, T \&gt;" alt="" coords="259,2444,414,2471"/>
<area shape="rect" id="node49" href="$structetl_1_1is__scalar.html" title="If T is a scalar type (that is a possibly cv&#45;qualified arithmetic, pointer, pointer to member..." alt="" coords="265,2495,408,2521"/>
<area shape="rect" id="node50" href="$structetl_1_1is__swappable.html" title="If T is not a referenceable type (i.e., possibly cv&#45;qualified void or a function type with a cv&#45;quali..." alt="" coords="250,2545,423,2572"/>
<area shape="rect" id="node51" href="$structetl_1_1is__trivial.html" title="If T is TrivialType (that is, a scalar type, a trivially copyable class with a trivial default constr..." alt="" coords="266,2596,407,2623"/>
<area shape="rect" id="node52" href="$structetl_1_1is__trivially__assignable.html" title="If the expression etl::declval&lt;T&gt;() = etl::declval&lt;U&gt;() is well&#45;formed in unevaluated context..." alt="" coords="241,2647,433,2689"/>
<area shape="rect" id="node53" href="$structetl_1_1is__trivially__constructible.html" title="The variable definition does not call any operation that is not trivial. For the purposes of this che..." alt="" coords="233,2713,440,2754"/>
<area shape="rect" id="node54" href="$classetl_1_1is__trivially__copyable_3_01T_01_5_01_4.html" title="etl::is_trivially_copyable\l\&lt; T * \&gt;" alt="" coords="246,2778,427,2819"/>
<area shape="rect" id="node55" href="$structetl_1_1is__trivially__destructible.html" title="https://en.cppreference.com/w/cpp/types/is_destructible " alt="" coords="218,2844,455,2871"/>
<area shape="rect" id="node56" href="$structetl_1_1is__unbounded__array.html" title="Checks whether T is an array type of unknown bound. Provides the member constant value which is equal..." alt="" coords="229,2895,445,2921"/>
<area shape="rect" id="node57" href="$structetl_1_1is__unbounded__array_3_01T[]_4.html" title="etl::is_unbounded_array\l\&lt; T[]\&gt;" alt="" coords="247,2946,426,2987"/>
<area shape="rect" id="node58" href="$structetl_1_1is__union.html" title="etl::is_union\&lt; T \&gt;" alt="" coords="267,3012,406,3039"/>
<area shape="rect" id="node59" href="$structetl_1_1is__volatile.html" title="etl::is_volatile\&lt; T \&gt;" alt="" coords="261,3063,413,3089"/>
<area shape="rect" id="node60" href="$structetl_1_1is__volatile_3_01volatile_01T_01_4.html" title="etl::is_volatile\&lt; volatile T \&gt;" alt="" coords="234,3113,439,3140"/>
<area shape="rect" id="node61" href="$structetl_1_1negation.html" title="Forms the logical negation of the type trait B. " alt="" coords="265,3164,408,3191"/>
<area shape="rect" id="node62" href="$structetl_1_1ratio__greater.html" title="Compares two ratio objects for equality at compile&#45;time. If the ratio R1 is greater than the ratio R2..." alt="" coords="271,3215,402,3257"/>
<area shape="rect" id="node63" href="$structetl_1_1ratio__greater__equal.html" title="Compares two ratio objects for equality at compile&#45;time. If the ratio R1 is greater than or equal to ..." alt="" coords="268,3281,405,3322"/>
<area shape="rect" id="node64" href="$structetl_1_1is__assignable.html" title="etl::is_assignable\l\&lt; etl::add_lvalue_reference\l\&lt; T \&gt;::type, etl::add_lvalue\l_reference\&lt; const T \&gt;::type \&gt;" alt="" coords="227,3346,447,3417"/>
<area shape="rect" id="node66" href="$structetl_1_1is__assignable.html" title="etl::is_assignable\l\&lt; etl::add_lvalue_reference\l\&lt; T \&gt;::type, etl::add_rvalue\l_reference\&lt; T \&gt;::type \&gt;" alt="" coords="235,3441,438,3511"/>
<area shape="rect" id="node70" href="$structetl_1_1is__floating__point.html" title="etl::is_floating_point\l\&lt; Rep \&gt;" alt="" coords="259,3601,414,3642"/>
<area shape="rect" id="node76" href="$structetl_1_1is__nothrow__constructible.html" title="etl::is_nothrow_constructible\&lt; T \&gt;" alt="" coords="213,3827,460,3853"/>
<area shape="rect" id="node78" href="$structetl_1_1is__nothrow__constructible.html" title="etl::is_nothrow_constructible\l\&lt; T, etl::add_lvalue_reference\l_t\&lt; etl::add_const_t\&lt; T \&gt; \&gt; \&gt;" alt="" coords="227,3877,447,3933"/>
<area shape="rect" id="node80" href="$structetl_1_1is__nothrow__constructible.html" title="etl::is_nothrow_constructible\l\&lt; T, etl::add_rvalue_reference\l_t\&lt; T \&gt; \&gt;" alt="" coords="227,3957,446,4013"/>
<area shape="rect" id="node86" href="$structetl_1_1is__same.html" title="etl::is_same\&lt; nullptr\l_t, remove_cv_t\&lt; T \&gt; \&gt;" alt="" coords="247,4198,426,4239"/>
<area shape="rect" id="node88" href="$structetl_1_1is__same.html" title="etl::is_same\&lt; void,\l remove_cv\&lt; T \&gt;::type \&gt;" alt="" coords="243,4263,431,4305"/>
<area shape="rect" id="node90" href="$structetl_1_1is__trivially__assignable.html" title="etl::is_trivially_assignable\l\&lt; etl::add_lvalue_reference\l\&lt; T \&gt;::type, etl::add_lvalue\l_reference\&lt; const T \&gt;::type \&gt;" alt="" coords="227,4329,447,4399"/>
<area shape="rect" id="node92" href="$structetl_1_1is__trivially__assignable.html" title="etl::is_trivially_assignable\l\&lt; etl::add_lvalue_reference\l\&lt; T \&gt;::type, etl::add_rvalue\l_reference\&lt; T \&gt;::type \&gt;" alt="" coords="235,4423,438,4494"/>
<area shape="rect" id="node94" href="$structetl_1_1is__trivially__constructible.html" title="etl::is_trivially_constructible\&lt; T \&gt;" alt="" coords="215,4519,459,4545"/>
<area shape="rect" id="node96" href="$structetl_1_1is__trivially__constructible.html" title="etl::is_trivially_constructible\l\&lt; T, etl::add_lvalue_reference\l_t\&lt; etl::add_const_t\&lt; T \&gt; \&gt; \&gt;" alt="" coords="227,4569,447,4625"/>
<area shape="rect" id="node98" href="$structetl_1_1is__trivially__constructible.html" title="etl::is_trivially_constructible\l\&lt; T, etl::add_rvalue_reference\l_t\&lt; T \&gt; \&gt;" alt="" coords="227,4649,446,4705"/>
<area shape="rect" id="node4" href="$structetl_1_1is__copy__constructible.html" title="If T is not a referenceable type (i.e., possibly cv&#45;qualified void or a function type with a cv&#45;quali..." alt="" coords="515,13,741,40"/>
<area shape="rect" id="node5" href="$structetl_1_1is__default__constructible.html" title="If etl::is_constructible&lt;T&gt;::value is true, provides the member constant value equal to true..." alt="" coords="508,64,748,91"/>
<area shape="rect" id="node6" href="$structetl_1_1is__move__constructible.html" title="If T is not a referenceable type (i.e., possibly cv&#45;qualified void or a function type with a cv&#45;quali..." alt="" coords="513,115,743,141"/>
<area shape="rect" id="node65" href="$structetl_1_1is__copy__assignable.html" title="If T is not a referenceable type (i.e., possibly cv&#45;qualified void or a function type with a cv&#45;quali..." alt="" coords="523,3368,733,3395"/>
<area shape="rect" id="node67" href="$structetl_1_1is__move__assignable.html" title="If T is not a referenceable type (i.e., possibly cv&#45;qualified void or a function type with a cv&#45;quali..." alt="" coords="519,3463,737,3489"/>
<area shape="rect" id="node69" href="$structetl_1_1is__empty.html" title="f T is an empty type (that is, a non&#45;union class type with no non&#45;static data members other than bit&#45;..." alt="" coords="555,3543,701,3569"/>
<area shape="rect" id="node71" href="$structetl_1_1chrono_1_1treat__as__floating__point.html" title="The etl::chrono::treat_as_floating_point trait helps determine if a duration can be converted to anot..." alt="" coords="531,3601,725,3642"/>
<area shape="rect" id="node73" href="$structetl_1_1is__member__function__pointer.html" title="Checks whether T is a non&#45;static member function pointer. Provides the member constant value which is..." alt="" coords="538,3674,718,3715"/>
<area shape="rect" id="node75" href="$structetl_1_1is__member__pointer.html" title="If T is pointer to non&#45;static member object or a pointer to non&#45;static member function, provides the member constant value equal true. For any other type, value is false. The behavior of a program that adds specializations for is_member_pointer or is_member_pointer_v (since C++17) is undefined. " alt="" coords="523,3761,733,3788"/>
<area shape="rect" id="node77" href="$structetl_1_1is__nothrow__default__constructible.html" title="If etl::is_nothrow_constructible&lt;T&gt;::value is true, provides the member constant value equal to true..." alt="" coords="543,3819,713,3861"/>
<area shape="rect" id="node79" href="$structetl_1_1is__nothrow__copy__constructible.html" title="Same as copy, but uses etl::is_nothrow_constructible&lt;T, T const&amp;&gt;. " alt="" coords="550,3885,706,3926"/>
<area shape="rect" id="node81" href="$structetl_1_1is__nothrow__move__constructible.html" title="If T is not a referenceable type (i.e., possibly cv&#45;qualified void or a function type with a cv&#45;quali..." alt="" coords="547,3965,709,4006"/>
<area shape="rect" id="node83" href="$structetl_1_1is__nothrow__swappable.html" title="If T is not a referenceable type (i.e., possibly cv&#45;qualified void or a function type with a cv&#45;quali..." alt="" coords="511,4052,745,4079"/>
<area shape="rect" id="node85" href="$structetl_1_1is__pointer.html" title="Checks whether T is a pointer to object or a pointer to function (but not a pointer to member/member ..." alt="" coords="553,4132,703,4159"/>
<area shape="rect" id="node87" href="$structetl_1_1is__null__pointer.html" title="etl::is_null_pointer\&lt; T \&gt;" alt="" coords="538,4205,718,4232"/>
<area shape="rect" id="node89" href="$structetl_1_1is__void.html" title="Define a member typedef only if a boolean constant is true. " alt="" coords="563,4271,693,4297"/>
<area shape="rect" id="node91" href="$structetl_1_1is__trivially__copy__assignable.html" title="If T is not a referenceable type (i.e., possibly cv&#45;qualified void or a function type with a cv&#45;quali..." alt="" coords="551,4343,705,4385"/>
<area shape="rect" id="node93" href="$structetl_1_1is__trivially__move__assignable.html" title="If T is not a referenceable type (i.e., possibly cv&#45;qualified void or a function type with a cv&#45;quali..." alt="" coords="549,4438,707,4479"/>
<area shape="rect" id="node95" href="$structetl_1_1is__trivially__default__constructible.html" title="If etl::is_trivially_constructible&lt;T&gt;::value is true, provides the member constant value equal to tru..." alt="" coords="544,4511,712,4553"/>
<area shape="rect" id="node97" href="$structetl_1_1is__trivially__copy__constructible.html" title="Same as copy, but uses etl::is_trivially_constructible&lt;T, T const&amp;&gt;. " alt="" coords="551,4577,705,4618"/>
<area shape="rect" id="node99" href="$structetl_1_1is__trivially__move__constructible.html" title="If T is not a referenceable type (i.e., possibly cv&#45;qualified void or a function type with a cv&#45;quali..." alt="" coords="549,4657,707,4698"/>
</map>
