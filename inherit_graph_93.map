<map id="Graphical Class Hierarchy" name="Graphical Class Hierarchy">
<area shape="rect" id="node1" href="$structetl_1_1integral__constant.html" title="etl::integral_constant\l\&lt; Type, val \&gt;" alt="" coords="5,1630,165,1671"/>
<area shape="rect" id="node2" href="$structetl_1_1conjunction.html" title="Forms the logical conjunction of the type traits B..., effectively performing a logical AND on the se..." alt="" coords="269,5,429,32"/>
<area shape="rect" id="node7" href="$structetl_1_1disjunction.html" title="Forms the logical disjunction of the type traits B..., effectively performing a logical OR on the seq..." alt="" coords="271,123,427,149"/>
<area shape="rect" id="node8" href="$structetl_1_1is__arithmetic.html" title="If T is an arithmetic type (that is, an integral type or a floating&#45;point type) or a cv&#45;qualified ver..." alt="" coords="263,173,434,200"/>
<area shape="rect" id="node9" href="$structetl_1_1is__array.html" title="Checks whether T is an array type. Provides the member constant value which is equal to true..." alt="" coords="280,224,417,251"/>
<area shape="rect" id="node10" href="$structetl_1_1is__array_3_01T[]_4.html" title="etl::is_array\&lt; T[]\&gt;" alt="" coords="277,275,420,301"/>
<area shape="rect" id="node11" href="$structetl_1_1is__array_3_01T[N]_4.html" title="etl::is_array\&lt; T[N]\&gt;" alt="" coords="272,325,425,352"/>
<area shape="rect" id="node12" href="$structetl_1_1is__assignable.html" title="If the expression etl::declval&lt;T&gt;() = etl::declval&lt;U&gt;() is well&#45;formed in unevaluated context..." alt="" coords="281,377,416,418"/>
<area shape="rect" id="node13" href="$structetl_1_1is__base__of.html" title="If Derived is derived from Base or if both are the same non&#45;union class (in both cases ignoring cv&#45;qu..." alt="" coords="265,442,432,483"/>
<area shape="rect" id="node14" href="$structetl_1_1is__class.html" title="etl::is_class\&lt; T \&gt;" alt="" coords="281,508,417,535"/>
<area shape="rect" id="node15" href="$structetl_1_1is__compound.html" title="If T is a compound type (that is, array, function, object pointer, function pointer, member object pointer, member function pointer, reference, class, union, or enumeration, including any cv&#45;qualified variants), provides the member constant value equal true. For any other type, value is false. " alt="" coords="263,559,434,585"/>
<area shape="rect" id="node16" href="$structetl_1_1is__const.html" title="etl::is_const\&lt; T \&gt;" alt="" coords="279,609,418,636"/>
<area shape="rect" id="node17" href="$structetl_1_1is__const_3_01const_01T_01_4.html" title="etl::is_const\&lt; const T \&gt;" alt="" coords="260,660,437,687"/>
<area shape="rect" id="node18" href="$structetl_1_1is__destructible_3_01Type[]_4.html" title="https://en.cppreference.com/w/cpp/types/is_destructible " alt="" coords="277,711,420,753"/>
<area shape="rect" id="node19" href="$structetl_1_1is__destructible_3_01void_01_4.html" title="https://en.cppreference.com/w/cpp/types/is_destructible " alt="" coords="277,777,420,818"/>
<area shape="rect" id="node20" href="$structetl_1_1is__enum.html" title="etl::is_enum\&lt; T \&gt;" alt="" coords="279,843,419,869"/>
<area shape="rect" id="node21" href="$structetl_1_1is__error__code__enum.html" title="etl::is_error_code\l_enum\&lt; T \&gt;" alt="" coords="281,894,416,935"/>
<area shape="rect" id="node22" href="$structetl_1_1is__error__condition__enum.html" title="etl::is_error_condition\l_enum\&lt; T \&gt;" alt="" coords="267,959,430,1001"/>
<area shape="rect" id="node23" href="$structetl_1_1is__error__condition__enum_3_01errc_01_4.html" title="etl::is_error_condition\l_enum\&lt; errc \&gt;" alt="" coords="267,1025,430,1066"/>
<area shape="rect" id="node24" href="$structetl_1_1is__function.html" title="Checks whether T is a function type. Types like etl::function, lambdas, classes with overloaded opera..." alt="" coords="271,1091,427,1117"/>
<area shape="rect" id="node25" href="$structetl_1_1is__member__object__pointer.html" title="Checks whether T is a non&#45;static member object pointer. Provides the member constant value which is e..." alt="" coords="265,1142,432,1183"/>
<area shape="rect" id="node26" href="$structetl_1_1is__nothrow__constructible.html" title="The variable definition does not call any operation that is not trivial. For the purposes of this che..." alt="" coords="244,1207,453,1249"/>
<area shape="rect" id="node27" href="$structetl_1_1is__nothrow__destructible_3_01Type_01_6_01_4.html" title="etl::is_nothrow_destructible\l\&lt; Type &amp; \&gt;" alt="" coords="247,1273,450,1314"/>
<area shape="rect" id="node28" href="$structetl_1_1is__nothrow__destructible_3_01Type_01_6_6_01_4.html" title="etl::is_nothrow_destructible\l\&lt; Type &amp;&amp; \&gt;" alt="" coords="247,1338,450,1379"/>
<area shape="rect" id="node29" href="$structetl_1_1is__object.html" title="If T is an object type (that is any possibly cv&#45;qualified type other than function, reference, or void types), provides the member constant value equal true. For any other type, value is false. " alt="" coords="277,1404,420,1431"/>
<area shape="rect" id="node30" href="$structetl_1_1is__reference.html" title="etl::is_reference\&lt; T \&gt;" alt="" coords="266,1455,431,1481"/>
<area shape="rect" id="node31" href="$structetl_1_1is__reference_3_01T_01_6_01_4.html" title="etl::is_reference\&lt;\l T &amp; \&gt;" alt="" coords="279,1506,418,1547"/>
<area shape="rect" id="node32" href="$structetl_1_1is__reference_3_01T_01_6_6_01_4.html" title="etl::is_reference\&lt;\l T &amp;&amp; \&gt;" alt="" coords="279,1571,418,1613"/>
<area shape="rect" id="node33" href="$structetl_1_1is__same.html" title="If T and U name the same type (taking into account const/volatile qualifications), provides the member constant value equal to true. Otherwise value is false. " alt="" coords="270,1637,427,1664"/>
<area shape="rect" id="node34" href="$structetl_1_1is__same_3_01T_00_01T_01_4.html" title="etl::is_same\&lt; T, T \&gt;" alt="" coords="271,1688,426,1715"/>
<area shape="rect" id="node35" href="$structetl_1_1is__scalar.html" title="If T is a scalar type (that is a possibly cv&#45;qualified arithmetic, pointer, pointer to member..." alt="" coords="277,1739,420,1765"/>
<area shape="rect" id="node36" href="$structetl_1_1is__swappable.html" title="If T is not a referenceable type (i.e., possibly cv&#45;qualified void or a function type with a cv&#45;quali..." alt="" coords="262,1789,435,1816"/>
<area shape="rect" id="node37" href="$structetl_1_1is__trivial.html" title="If T is TrivialType (that is, a scalar type, a trivially copyable class with a trivial default constr..." alt="" coords="278,1840,419,1867"/>
<area shape="rect" id="node38" href="$structetl_1_1is__trivially__assignable.html" title="If the expression etl::declval&lt;T&gt;() = etl::declval&lt;U&gt;() is well&#45;formed in unevaluated context..." alt="" coords="253,1891,445,1933"/>
<area shape="rect" id="node39" href="$structetl_1_1is__trivially__constructible.html" title="The variable definition does not call any operation that is not trivial. For the purposes of this che..." alt="" coords="245,1957,452,1998"/>
<area shape="rect" id="node40" href="$classetl_1_1is__trivially__copyable_3_01T_01_5_01_4.html" title="etl::is_trivially_copyable\l\&lt; T * \&gt;" alt="" coords="258,2022,439,2063"/>
<area shape="rect" id="node41" href="$structetl_1_1is__trivially__destructible.html" title="https://en.cppreference.com/w/cpp/types/is_destructible " alt="" coords="230,2088,467,2115"/>
<area shape="rect" id="node42" href="$structetl_1_1is__union.html" title="etl::is_union\&lt; T \&gt;" alt="" coords="279,2139,418,2165"/>
<area shape="rect" id="node43" href="$structetl_1_1negation.html" title="Forms the logical negation of the type trait B. " alt="" coords="277,2189,420,2216"/>
<area shape="rect" id="node44" href="$structetl_1_1ratio__greater.html" title="Compares two ratio objects for equality at compile&#45;time. If the ratio R1 is greater than the ratio R2..." alt="" coords="283,2241,414,2282"/>
<area shape="rect" id="node45" href="$structetl_1_1ratio__greater__equal.html" title="Compares two ratio objects for equality at compile&#45;time. If the ratio R1 is greater than or equal to ..." alt="" coords="280,2306,417,2347"/>
<area shape="rect" id="node46" href="$structetl_1_1is__assignable.html" title="etl::is_assignable\l\&lt; etl::add_lvalue_reference\l\&lt; T \&gt;::type, etl::add_lvalue\l_reference\&lt; const T \&gt;::type \&gt;" alt="" coords="239,2371,459,2442"/>
<area shape="rect" id="node48" href="$structetl_1_1is__assignable.html" title="etl::is_assignable\l\&lt; etl::add_lvalue_reference\l\&lt; T \&gt;::type, etl::add_rvalue\l_reference\&lt; T \&gt;::type \&gt;" alt="" coords="247,2466,450,2537"/>
<area shape="rect" id="node54" href="$structetl_1_1is__nothrow__constructible.html" title="etl::is_nothrow_constructible\&lt; T \&gt;" alt="" coords="225,2721,472,2748"/>
<area shape="rect" id="node56" href="$structetl_1_1is__nothrow__constructible.html" title="etl::is_nothrow_constructible\l\&lt; T, etl::add_lvalue_reference\l\&lt; etl::add_const\&lt; T \&gt;::type \&gt;::type \&gt;" alt="" coords="213,2772,484,2828"/>
<area shape="rect" id="node58" href="$structetl_1_1is__nothrow__constructible.html" title="etl::is_nothrow_constructible\l\&lt; T, etl::add_rvalue_reference\l\&lt; T \&gt;::type \&gt;" alt="" coords="239,2852,458,2908"/>
<area shape="rect" id="node64" href="$structetl_1_1is__same.html" title="etl::is_same\&lt; nullptr\l_t, remove_cv_t\&lt; T \&gt; \&gt;" alt="" coords="259,3093,438,3134"/>
<area shape="rect" id="node66" href="$structetl_1_1is__same.html" title="etl::is_same\&lt; void,\l remove_cv\&lt; T \&gt;::type \&gt;" alt="" coords="255,3158,443,3199"/>
<area shape="rect" id="node68" href="$structetl_1_1is__trivially__assignable.html" title="etl::is_trivially_assignable\l\&lt; etl::add_lvalue_reference\l\&lt; T \&gt;::type, etl::add_lvalue\l_reference\&lt; const T \&gt;::type \&gt;" alt="" coords="239,3223,459,3294"/>
<area shape="rect" id="node70" href="$structetl_1_1is__trivially__assignable.html" title="etl::is_trivially_assignable\l\&lt; etl::add_lvalue_reference\l\&lt; T \&gt;::type, etl::add_rvalue\l_reference\&lt; T \&gt;::type \&gt;" alt="" coords="247,3318,450,3389"/>
<area shape="rect" id="node72" href="$structetl_1_1is__trivially__constructible.html" title="etl::is_trivially_constructible\&lt; T \&gt;" alt="" coords="227,3413,471,3440"/>
<area shape="rect" id="node74" href="$structetl_1_1is__trivially__constructible.html" title="etl::is_trivially_constructible\l\&lt; T, etl::add_lvalue_reference\l_t\&lt; etl::add_const_t\&lt; T \&gt; \&gt; \&gt;" alt="" coords="239,3464,459,3520"/>
<area shape="rect" id="node76" href="$structetl_1_1is__trivially__constructible.html" title="etl::is_trivially_constructible\l\&lt; T, etl::add_rvalue_reference\l\&lt; T \&gt;::type \&gt;" alt="" coords="239,3544,458,3600"/>
<area shape="rect" id="node4" href="$structetl_1_1is__copy__constructible.html" title="If T is not a referenceable type (i.e., possibly cv&#45;qualified void or a function type with a cv&#45;quali..." alt="" coords="539,13,765,40"/>
<area shape="rect" id="node5" href="$structetl_1_1is__default__constructible.html" title="If etl::is_constructible&lt;T&gt;::value is true, provides the member constant value equal to true..." alt="" coords="532,64,772,91"/>
<area shape="rect" id="node6" href="$structetl_1_1is__move__constructible.html" title="If T is not a referenceable type (i.e., possibly cv&#45;qualified void or a function type with a cv&#45;quali..." alt="" coords="537,115,767,141"/>
<area shape="rect" id="node47" href="$structetl_1_1is__copy__assignable.html" title="If T is not a referenceable type (i.e., possibly cv&#45;qualified void or a function type with a cv&#45;quali..." alt="" coords="547,2393,757,2420"/>
<area shape="rect" id="node49" href="$structetl_1_1is__move__assignable.html" title="If T is not a referenceable type (i.e., possibly cv&#45;qualified void or a function type with a cv&#45;quali..." alt="" coords="543,2488,761,2515"/>
<area shape="rect" id="node51" href="$structetl_1_1is__member__function__pointer.html" title="Checks whether T is a non&#45;static member function pointer. Provides the member constant value which is..." alt="" coords="562,2569,742,2610"/>
<area shape="rect" id="node53" href="$structetl_1_1is__member__pointer.html" title="If T is pointer to non&#45;static member object or a pointer to non&#45;static member function, provides the member constant value equal true. For any other type, value is false. The behavior of a program that adds specializations for is_member_pointer or is_member_pointer_v (since C++17) is undefined. " alt="" coords="547,2656,757,2683"/>
<area shape="rect" id="node55" href="$structetl_1_1is__nothrow__default__constructible.html" title="If etl::is_nothrow_constructible&lt;T&gt;::value is true, provides the member constant value equal to true..." alt="" coords="567,2714,737,2755"/>
<area shape="rect" id="node57" href="$structetl_1_1is__nothrow__copy__constructible.html" title="Same as copy, but uses etl::is_nothrow_constructible&lt;T, const T&amp;&gt;. " alt="" coords="574,2779,730,2821"/>
<area shape="rect" id="node59" href="$structetl_1_1is__nothrow__move__constructible.html" title="If T is not a referenceable type (i.e., possibly cv&#45;qualified void or a function type with a cv&#45;quali..." alt="" coords="571,2859,733,2901"/>
<area shape="rect" id="node61" href="$structetl_1_1is__nothrow__swappable.html" title="If T is not a referenceable type (i.e., possibly cv&#45;qualified void or a function type with a cv&#45;quali..." alt="" coords="535,2947,769,2973"/>
<area shape="rect" id="node63" href="$structetl_1_1is__pointer.html" title="Checks whether T is a pointer to object or a pointer to function (but not a pointer to member/member ..." alt="" coords="577,3027,727,3053"/>
<area shape="rect" id="node65" href="$structetl_1_1is__null__pointer.html" title="etl::is_null_pointer\&lt; T \&gt;" alt="" coords="562,3100,742,3127"/>
<area shape="rect" id="node67" href="$structetl_1_1is__void.html" title="Define a member typedef only if a boolean constant is true. " alt="" coords="587,3165,717,3192"/>
<area shape="rect" id="node69" href="$structetl_1_1is__trivially__copy__assignable.html" title="If T is not a referenceable type (i.e., possibly cv&#45;qualified void or a function type with a cv&#45;quali..." alt="" coords="575,3238,729,3279"/>
<area shape="rect" id="node71" href="$structetl_1_1is__trivially__move__assignable.html" title="If T is not a referenceable type (i.e., possibly cv&#45;qualified void or a function type with a cv&#45;quali..." alt="" coords="573,3333,731,3374"/>
<area shape="rect" id="node73" href="$structetl_1_1is__trivially__default__constructible.html" title="If etl::is_trivially_constructible&lt;T&gt;::value is true, provides the member constant value equal to tru..." alt="" coords="568,3406,736,3447"/>
<area shape="rect" id="node75" href="$structetl_1_1is__trivially__copy__constructible.html" title="Same as copy, but uses etl::is_trivially_constructible&lt;T, const T&amp;&gt;. " alt="" coords="575,3471,729,3513"/>
<area shape="rect" id="node77" href="$structetl_1_1is__trivially__move__constructible.html" title="If T is not a referenceable type (i.e., possibly cv&#45;qualified void or a function type with a cv&#45;quali..." alt="" coords="573,3551,731,3593"/>
</map>
